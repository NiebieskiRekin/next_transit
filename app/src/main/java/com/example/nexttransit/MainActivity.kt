package com.example.nexttransit

import android.content.Context
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.rounded.DirectionsBike
import androidx.compose.material.icons.automirrored.rounded.DirectionsWalk
import androidx.compose.material.icons.rounded.DirectionsBoat
import androidx.compose.material.icons.rounded.DirectionsBus
import androidx.compose.material.icons.rounded.DirectionsCar
import androidx.compose.material.icons.rounded.DirectionsRailway
import androidx.compose.material.icons.rounded.DirectionsTransit
import androidx.compose.material.icons.rounded.QuestionMark
import androidx.compose.material.icons.rounded.Tram
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.datastore.dataStore
import com.example.nexttransit.ApiCaller.getSampleDirections
import com.example.nexttransit.ui.theme.NextTransitTheme
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import java.util.Calendar
import java.util.Locale


val Context.dataStore by dataStore("app-settings.json", AppSettingsSerializer)


class MainActivity : ComponentActivity() {

//    private val destination = "ChIJC0kwPxJbBEcRaulLN8Dqppc"
//    private val origin  = "ChIJLcfSImn7BEcRa3MR7sqwJsw"


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            NextTransitTheme {

                var appSettings = dataStore.data.collectAsState(initial = AppSettings()).value
                val scope = rememberCoroutineScope()

                var directions by remember {mutableStateOf(DirectionsResponse(status="Empty"))}
                var source by remember { mutableStateOf(TextFieldValue(appSettings.source.name)) }
                var destination by remember { mutableStateOf(TextFieldValue(appSettings.destination.name)) }
                var prefsButtonText by remember { mutableStateOf("Update preferences")}

                // super weird
                val tertiary = MaterialTheme.colorScheme.tertiary
                val secondary = MaterialTheme.colorScheme.secondary
                val error = MaterialTheme.colorScheme.error
                var prefsButtonColor by remember { mutableStateOf(tertiary) }

                var directionsGenerated by remember { mutableStateOf(false)}

                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    Column {
                        OutlinedTextField(
                            value = source,
                            onValueChange = {
                                source = it
                                prefsButtonColor = tertiary
                                prefsButtonText="Update preferences"
                                directionsGenerated = false},
                            label = { Text("Origin") },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(10.dp, 0.dp)
                        )
                        OutlinedTextField(
                            value = destination,
                            onValueChange = {
                                destination = it
                                prefsButtonColor=tertiary
                                prefsButtonText="Update preferences"
                                directionsGenerated = false},
                            label = { Text("Destination") },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(10.dp, 0.dp)
                        )

                        Row (horizontalArrangement = Arrangement.SpaceEvenly, modifier = Modifier.fillMaxWidth()){
                            Button(onClick = {
                                scope.launch {
                                    try {
                                        //directions = ApiCaller.getDirectionsByName(source.text,destination.text)
                                        directions =  getSampleDirections()
                                        directionsGenerated = true
                                    } catch (e: Exception) {
                                        directions = DirectionsResponse(status = "Error")
                                        directionsGenerated = false
                                    }
                                }
                            }) {
                                Text("Show directions!")
                            }
                            Button(onClick = { scope.launch {
                                    try {
                                        setSettings(source.text,destination.text,directions)
                                        prefsButtonText = "Updated"
                                        prefsButtonColor = secondary
                                        appSettings = getSettings()

                                    } catch (e: Exception){
                                        prefsButtonText = "Error!"
                                        prefsButtonColor = error
                                    }
                                }},
                                colors = ButtonDefaults.buttonColors(prefsButtonColor),
                                enabled = source.text.isNotBlank() && destination.text.isNotBlank() && directionsGenerated

                            ){
                                Text(prefsButtonText)
                            }
                        }
                        Log.e("ApiResponse", directions.toString())
                        SimpleDisplay(directions)

                        Spacer(
                            Modifier
                                .size(0.dp, 10.dp)
                                .fillMaxWidth())
                        Text(text = "Debug output", modifier=Modifier.padding(5.dp,0.dp))
                        LazyColumn(modifier = Modifier
                            .padding(5.dp)
                            .border(2.dp, Color.LightGray)
                            .padding(5.dp)){
                            item {
                                Text(text="AppSettings:", style = TextStyle(fontWeight = FontWeight.Bold, fontSize = 20.sp))
                                Text(text=appSettings.toString())
                            }
                            item{Spacer(
                                Modifier
                                    .size(0.dp, 10.dp)
                                    .fillMaxWidth())}
                            item {
                                Text(text="Directions:", style = TextStyle(fontWeight = FontWeight.Bold, fontSize=20.sp))
                                Text(text = directions.toString())
                            }
                        }
                    }
                }
            }
        }
    }

    private suspend fun getSettings() : AppSettings {
        return try {
            dataStore.data.first()
        } catch (e: Exception) {
            Log.e("DataStore",dataStore.data.toString())
            AppSettings()
        }
    }

    private suspend fun setSettings(sourceName: String, destinationName: String, directions: DirectionsResponse){
        dataStore.updateData {
            it.copy(
                source = Location(sourceName,directions.geocoded_waypoints[0].place_id),
                destination = Location(destinationName,directions.geocoded_waypoints[1].place_id),
                lastDirectionsResponse = directions
            )
        }
    }
}



@Preview(showBackground=true)
@Composable
fun SimpleDisplay(directions: DirectionsResponse = getSampleDirections()){
    NextTransitTheme {
        when (directions.status){
            "OK" -> {
                LazyColumn(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(MaterialTheme.shapes.large)
                        .background(MaterialTheme.colorScheme.secondary)
                        .padding(10.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    if (directions.routes.isEmpty()) {
                        item {
                            Text(
                                text = "Error: no route found.",
                                color = MaterialTheme.colorScheme.onSecondary,
                                )
                        }
                    }
                    items(directions.routes) { route: Route ->
                        for (leg: Leg in route.legs) {
                            Row(verticalAlignment = Alignment.CenterVertically) {
                                Text(
                                    text = "Departure: ",
                                    style = TextStyle(
                                        color = MaterialTheme.colorScheme.onSecondary,
                                        fontWeight = FontWeight.Bold,
                                        fontSize = 12.sp
                                    )
                                )
                                Text(
                                    text = leg.departure_time.text,
                                    style = TextStyle(
                                        color = MaterialTheme.colorScheme.onSecondary,
                                        fontWeight = FontWeight.Bold,
                                        fontSize = 16.sp
                                    )
                                )
                                Spacer(Modifier.size(16.dp))
                                Text(
                                    text = "Planned Arrival: ",
                                    style = TextStyle(
                                        color = MaterialTheme.colorScheme.onSecondary,
                                        fontWeight = FontWeight.Bold,
                                        fontSize = 12.sp
                                    )
                                )
                                Text(
                                    text = leg.arrival_time.text,
                                    style = TextStyle(
                                        color = MaterialTheme.colorScheme.onSecondary,
                                        fontWeight = FontWeight.Bold,
                                        fontSize = 16.sp
                                    )
                                )
                            }
                            LazyRow(verticalAlignment = Alignment.CenterVertically) {
                                for ((i, bigStep: BigStep) in leg.steps.withIndex()) {
                                    item {
                                        Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                            val travelModeText = getTravelModeText(bigStep)
                                            Icon(
                                                imageVector = getTravelModeIcon(travelModeText),
                                                travelModeText,
                                                tint = MaterialTheme.colorScheme.onSecondary,
                                            )
                                            Text(
                                                text = getTravelTime(bigStep),
                                                style = TextStyle(color = MaterialTheme.colorScheme.onSecondary)
                                            )
                                        }
                                        if (i < leg.steps.lastIndex) {
                                            Text(
                                                text = " > ",
                                                style = TextStyle(color = MaterialTheme.colorScheme.onSecondary)
                                            )
//                                        Spacer(Modifier.size(16.dp))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            "Error" -> Text(text="Error: directions data not available.")
            "Empty" -> Text(text="")
            else -> {}
        }
    }
}

fun getShortDate(ts:Long?):String{
    if(ts == null) return ""
    //Get instance of calendar
    val calendar = Calendar.getInstance(Locale.getDefault())
    //get current date from ts
    calendar.timeInMillis = ts
    //return formatted date
    return android.text.format.DateFormat.format("E, dd MMM yyyy", calendar).toString()
}

fun getLocalTime(ts:Long?):String{
    if(ts == null) return ""
    //Get instance of calendar
    val calendar = Calendar.getInstance(Locale.getDefault())
    //get current date from ts
    calendar.timeInMillis = ts
    //return formatted date
    return android.text.format.DateFormat.format("E", calendar).toString()
}

fun getTravelModeText(bigStep: BigStep): String {
    return if (bigStep.travel_mode == "TRANSIT") {
        bigStep.transit_details?.line?.vehicle?.type ?: "TRANSIT"
    } else {
        bigStep.travel_mode
    }
}

fun getTravelTime(bigStep: BigStep): String {
    return if (bigStep.travel_mode == "TRANSIT") {
        (bigStep.transit_details?.departure_time?.text + "-" + bigStep.transit_details?.arrival_time?.text)
    } else {
        bigStep.duration.text
    }
}


private fun getTravelModeIcon(travelMode: String) = when (travelMode) {
    "TRANSIT" -> Icons.Rounded.DirectionsTransit
    "WALKING" -> Icons.AutoMirrored.Rounded.DirectionsWalk
    "BICYCLING" -> Icons.AutoMirrored.Rounded.DirectionsBike
    "DRIVING" -> Icons.Rounded.DirectionsCar
    "BUS" -> Icons.Rounded.DirectionsBus
    "TRAM" -> Icons.Rounded.Tram
    "HEAVY_RAIL" -> Icons.Rounded.DirectionsRailway
    "BOAT" -> Icons.Rounded.DirectionsBoat
    else -> Icons.Rounded.QuestionMark
}